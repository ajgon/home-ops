---
argo-cd:
  global:
    podAnnotations:
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
  configs:
    params:
      # by default argocd handles SSL termination on its own, which breaks TLS termination on nginx,
      # causing infinite loop
      "server.insecure": true

  controller:
    replicas: 2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-stack
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        memory: 1Gi

  dex:
    enabled: false

  notifications:
    enabled: false

  server:
    autoscaling:
      enabled: true
      minReplicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        memory: 1Gi
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/enable-global-auth: "false"
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Admin
        gethomepage.dev/name: ArgoCD
        gethomepage.dev/icon: argocd.png
        gethomepage.dev/description: CD Platform
      ingressClassName: nginx
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-stack
    config:
      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,secrets+literal,
        https

  repoServer:
    replicas: 2
    autoscaling:
      enabled: false
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        memory: 1Gi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-stack
    serviceAccount:
      create: true
      name: argocd-repo-server
    rbac:
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
    env:
      - name: HELM_PLUGINS
        value: /custom-tools/helm-plugins/
      - name: HELM_SECRETS_SOPS_PATH
        value: /custom-tools/sops
      - name: HELM_SECRETS_VALS_PATH
        value: /custom-tools/vals
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /custom-tools/kubectl
      - name: HELM_SECRETS_CURL_PATH
        value: /custom-tools/curl
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "true"
    volumes:
      - name: custom-tools
        emptyDir: {}
    volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools

    initContainers:
      - name: download-tools
        image: alpine:latest
        command: [sh, -ec]
        env:
          - name: HELM_SECRETS_VERSION
            value: "4.3.0"
          - name: KUBECTL_VERSION
            value: "1.26.1"
          - name: VALS_VERSION
            value: "0.22.0"
          - name: SOPS_VERSION
            value: "3.7.3"
        args:
          # yamllint disable rule:line-length
          - |
            mkdir -p /custom-tools/helm-plugins
            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

            wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux
            wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

            wget -qO- https://github.com/variantdev/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;

            # helm secrets wrapper mode installation (optional)
            # RUN printf '#!/usr/bin/env sh\nexec %s secrets "$@"' "${HELM_SECRETS_HELM_PATH}" >"/usr/local/sbin/helm" && chmod +x "/custom-tools/helm"

            chmod +x /custom-tools/*
          # yamllint enable
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
        securityContext:
          runAsUser: 10000
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault

  applicationSet:
    replicaCount: 2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-stack
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
      limits:
        memory: 1Gi

  redis:
    enabled: false
  redis-ha:
    enabled: false
  externalRedis:
    host: redis-ha-haproxy.storage.svc.cluster.local
    existingSecret: argocd-credentials
    port: 6379

argocd-image-updater:
  replicaCount: 2
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus-stack
  podAnnotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  podSecurityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      memory: 1Gi
